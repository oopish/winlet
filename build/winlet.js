// Generated by CoffeeScript 1.9.2
(function(ªG) {
/*! Winlet 0.0.1 //// MIT Licence //// http://winlet.oopish.com/ */
var Node, SomeClass, Winlet, xx, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªinsert, ªis, ªisU, ªredefine, ªtype, ªuid,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ªC = 'Winlet';

ªV = '0.0.1';

Node = (function() {
  Node.prototype.C = 'Node';

  Node.prototype.toString = function() {
    return '[object Node]';
  };

  function Node(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/winlet/src/Node/Node-base.litcoffee Node()\n  ";
    this.childNodes = [];
    this.firstChild = null;
    this.lastChild = null;
    this.parentNode = null;
    this.previousSibling = null;
    this.nextSibling = null;
  }

  Node.prototype.appendChild = function(aChild) {
    var M, length, ref;
    M = "/winlet/src/Node/Node-base.litcoffee Node.appendChild()\n  ";
    if (!(aChild instanceof Node)) {
      throw TypeError(M + "`achild` does not inherit from `Node`");
    }
    if ((ref = aChild.parentNode) != null) {
      ref.removeChild(aChild);
    }
    aChild.parentNode = this;
    length = this.childNodes.push(aChild);
    this.firstChild = this.childNodes[0];
    this.lastChild = aChild;
    aChild.nextSibling = null;
    if (1 === length) {
      aChild.previousSibling = null;
    } else {
      aChild.previousSibling = this.childNodes[length - 2];
      aChild.previousSibling.nextSibling = aChild;
    }
    return aChild;
  };

  Node.prototype.insertBefore = function(newNode, referenceNode) {
    var M, i, ref;
    M = "/winlet/src/Node/Node-base.litcoffee Node.insertBefore()\n  ";
    if (!(newNode instanceof Node)) {
      throw TypeError(M + "`newNode` does not inherit from `Node`");
    }
    if (!(referenceNode instanceof Node)) {
      throw TypeError(M + "`referenceNode` does not inherit from `Node`");
    }
    i = this.childNodes.indexOf(referenceNode);
    if (-1 === i) {
      throw RangeError(M + "`referenceNode` not found in `childNodes`");
    }
    this.childNodes.splice(i, 0, newNode);
    this.firstChild = this.childNodes[0];
    this.lastChild = this.childNodes[length - 1];
    newNode.nextSibling = referenceNode;
    if (0 === i) {
      newNode.previousSibling = null;
    } else {
      newNode.previousSibling = referenceNode.previousSibling;
      referenceNode.previousSibling.nextSibling = newNode;
    }
    referenceNode.previousSibling = newNode;
    if ((ref = newNode.parentNode) != null) {
      ref.removeChild(newNode);
    }
    newNode.parentNode = this;
    return newNode;
  };

  Node.prototype.removeChild = function(child) {
    var M, i, ref, ref1;
    M = "/winlet/src/Node/Node-base.litcoffee Node.removeChild()\n  ";
    if (!(child instanceof Node)) {
      throw TypeError(M + "`child` does not inherit from `Node`");
    }
    i = this.childNodes.indexOf(child);
    if (-1 === i) {
      throw RangeError(M + "`child` not found in `childNodes`");
    }
    this.childNodes.splice(i, 1);
    this.firstChild = this.childNodes[0];
    this.lastChild = this.childNodes[length - 1];
    if ((ref = child.previousSibling) != null) {
      ref.nextSibling = child.nextSibling;
    }
    if ((ref1 = child.nextSibling) != null) {
      ref1.previousSibling = child.previousSibling;
    }
    child.parentNode = null;
    child.previousSibling = null;
    child.nextSibling = null;
    return child;
  };

  return Node;

})();

Node.HTMLDocument = (function(superClass) {
  extend(HTMLDocument, superClass);

  HTMLDocument.prototype.C = 'Node.HTMLDocument';

  HTMLDocument.prototype.toString = function() {
    return '[object Node.HTMLDocument]';
  };

  function HTMLDocument(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/winlet/src/Node/Node.HTMLDocument.litcoffee Node.HTMLDocument()\n  ";
    HTMLDocument.__super__.constructor.call(this);
    this.body = new Node.HTMLElement;
  }

  HTMLDocument.prototype.createElement = function(tagName) {
    return new Node.HTMLElement(tagName);
  };

  HTMLDocument.prototype.createTextNode = function(data) {
    return new Node.Text(data);
  };

  HTMLDocument.prototype.querySelector = function(selectors) {
    if ('body' === selectors) {
      return this.body;
    }
    return null;
  };

  HTMLDocument.prototype.querySelectorAll = function(selectors) {
    if ('body' === selectors) {
      return [this.body];
    }
    return [];
  };

  return HTMLDocument;

})(Node);

Node.HTMLElement = (function(superClass) {
  extend(HTMLElement, superClass);

  HTMLElement.prototype.C = 'Node.HTMLElement';

  HTMLElement.prototype.toString = function() {
    return '[object Node.HTMLElement]';
  };

  function HTMLElement(tagName1) {
    var M;
    this.tagName = tagName1;
    M = "/winlet/src/Node/Node.HTMLElement.litcoffee Node.HTML" + this.tagName + "Element()\n  ";
    HTMLElement.__super__.constructor.call(this);
    this.attributes = {};
  }

  HTMLElement.prototype.insertAdjacentHTML = function(position, text) {};

  HTMLElement.prototype.getAttribute = function(attributeName) {
    var value;
    value = this.attributes[attributeName];
    if (ªU === typeof value) {
      return null;
    } else {
      return value;
    }
  };

  HTMLElement.prototype.setAttribute = function(name, value) {
    this.attributes[name] = '' + value;
    return void 0;
  };

  return HTMLElement;

})(Node);

SomeClass = (function() {
  SomeClass.prototype.C = 'SomeClass';

  SomeClass.prototype.toString = function() {
    return '[object SomeClass]';
  };

  function SomeClass(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/winlet/src/SomeClass/SomeClass.litcoffee SomeClass()\n  ";
    this.x = null;
  }

  SomeClass.prototype.xx = function(xx) {
    var M;
    return M = "/winlet/src/SomeClass/SomeClass.litcoffee SomeClass.xx()\n  ";
  };

  return SomeClass;

})();

xx = function(xx) {
  var M;
  return M = "/winlet/src/SomeClass/SomeClass.litcoffee xx()\n  ";
};

Winlet = (function() {
  Winlet.prototype.C = 'Winlet';

  Winlet.prototype.toString = function() {
    return '[object Winlet]';
  };

  function Winlet(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/winlet/src/Winlet.litcoffee Winlet()\n  ";
    this.document = new Node.HTMLDocument;
  }

  Winlet.prototype.xx = function(xx) {
    var M;
    return M = "/winlet/src/Winlet.litcoffee Winlet.xx()\n  ";
  };

  return Winlet;

})();

xx = function(xx) {
  var M;
  return M = "/winlet/src/Winlet.litcoffee xx()\n  ";
};

ªA = 'array';

ªB = 'boolean';

ªE = 'error';

ªF = 'function';

ªN = 'number';

ªO = 'object';

ªR = 'regexp';

ªS = 'string';

ªU = 'undefined';

ªX = 'null';

ª = console.log.bind(console);

ªex = function(x, a, b) {
  var pos;
  if (-1 === (pos = a.indexOf(x))) {
    return x;
  } else {
    return b.charAt(pos);
  }
};

ªis = function(c, t, f) {
  if (t == null) {
    t = true;
  }
  if (f == null) {
    f = false;
  }
  if (c) {
    return t;
  } else {
    return f;
  }
};

ªhas = function(h, n, t, f) {
  if (t == null) {
    t = true;
  }
  if (f == null) {
    f = false;
  }
  if (-1 !== h.indexOf(n)) {
    return t;
  } else {
    return f;
  }
};

ªtype = function(x) {
  return {}.toString.call(x).match(/\s([a-z0-9]+)/i)[1].toLowerCase();
};

ªisU = function(x) {
  return ªU === typeof x;
};

ªuid = function(p) {
  return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
};

ªinsert = function(basis, overlay, offset) {
  return basis.slice(0, offset) + overlay + basis.slice(offset + overlay.length);
};

ªredefine = function(obj, name, value, kind) {
  switch (kind) {
    case 'constant':
      return Object.defineProperty(obj, name, {
        value: value,
        enumerable: true
      });
    case 'private':
      return Object.defineProperty(obj, name, {
        value: value,
        enumerable: false
      });
  }
};

if (ªF === typeof define && define.amd) {
  define(function() {
    return Winlet;
  });
} else if (ªO === typeof module && module && module.exports) {
  module.exports = Winlet;
} else {
  ªG.Winlet = Winlet;
}
}).call(this,this);
// Example vendor file. 
